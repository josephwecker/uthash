utarray: dynamic array macros for C structures
==============================================
Troy D. Hanson <thanson@users.sourceforge.net>
v1.9, March 2010

include::sflogo.txt[]
include::topnav_utarray.txt[]

Introduction
------------
include::toc.txt[]

A set of general-purpose dynamic array macros for C structures are included with
uthash in `utarray.h`.  To use these macros in your own C program, just
copy `utarray.h` into your source directory and use it in your programs.

  #include "utarray.h"

The dynamic array supports basic operations such as push, pop, and erase on the
array elements. These array elements can be any simple datatype or structure.
The array operations, based very loosely on the C++ STL vector methods, are
listed in full below.

Internally the dynamic array contains a contiguous memory region into which
the elements are copied. This buffer is grown as needed using `realloc` to
accomodate all the data that is pushed into it.

Download
~~~~~~~~
To download the `utarray.h` header file, follow the link on the
http://uthash.sourceforge.net[uthash home page]. 

BSD licensed
~~~~~~~~~~~~
This software is made available under the 
link:license.html[revised BSD license]. 
It is free and open source. 

Platforms
~~~~~~~~~
The 'utarray' macros have been tested on:

 * Linux, 
 * Mac OS X, 
 * Windows, using Visual Studio 2008 and Visual Studio 2010

Using utarray
------------

UT_array
~~~~~~~~
The array itself has the data type `UT_array`, regardless of the type of
elements to be stored in it. It is declared like,

  UT_array *a;

The examples below assume we've declared `UT_array *nums;` and `UT_array *strs;`.

Array elements
~~~~~~~~~~~~~~

Integers and strings
^^^^^^^^^^^^^^^^^^^^
Here are two examples of how we could now initialize arrays to store either
integers or strings,

  utarray_new(nums,&ut_int_icd);  /* to store integers */
  utarray_new(strs,&ut_str_icd);  /* to store strings */

Support for arrays of integers and strings uses these predefined `ut_int_icd`
and `ut_str_icd` helper structures. These will be covered in detail shortly.
For now, let's first see how to push data into the array. Here's how we could
push integers 0-9 into the `nums` array:

  int i;
  for(i=0; i < 10; i++) utarray_push_back(nums,&i);

Similarly, here's how we could push a couple of strings into the `strs` array:

  char *s;
  s = "hello"; utarray_push_back(strs, &s);
  s = "world"; utarray_push_back(strs, &s);

Note that the second argument is always a pointer to the type (so a literal
cannot be used). So in the case of strings, we are passing a `char**`.

Custom elements types
^^^^^^^^^^^^^^^^^^^^^
Of course, arrays can hold any type of element, not just integers and strings.
The elements can be basic types or structures. You need to define the C
functions to initialize an empty element, to copy an element and to destruct an
element. Any or all of these can be `NULL` to use default behavior explained
below. Finally, the size of the element must be provided so that the array can
be managed automatically. These C functions and the element size are passed
together as a `UT_icd` structure, defined in `utarray.h`:

  typedef struct {
      size_t sz;
      init_f *init;
      ctor_f *copy;
      dtor_f *dtor;
  } UT_icd;

The three function pointers `init`, `copy`, and `dtor` have these prototypes:

  typedef void (ctor_f)(void *dst, const void *src);
  typedef void (dtor_f)(void *elt);
  typedef void (init_f)(void *elt);

Here is when they are invoked:

[width="100%",cols="10^,90<",grid="none",options="none"]
|===============================================================================
| init  |  initialize an empty element as a result of `utarray_resize` or `utarray_extend_back`
| copy  |  copy an element due to an `utarray_push_back`, `utarray_inserta`, or `utarray_concat`
| dtor  |  destruct an element due to an `utarray_resize`, `utarray_pop_back`, `utarray_erase` or `utarray_clear`, `utarray_done` or `utarray_free`
|===============================================================================

Simple elements
+++++++++++++++
When `init`, `copy` or `dtor` are `NULL` they default to: memset-to-zero,
memcpy, and do-nothing, respectively.

For example, to have a utarray of `long` we'd declare a `UT_icd` with default
(`NULL`) values for `init`, `copy` or `dtor`:

  UT_icd long_icd = {sizeof(long), NULL, NULL, NULL };
  utarray_new(nums, &long_icd);

Looking at the four members of `long_icd`, we have:
 - the element size first,
 - then the initializor function (here `NULL` which zero fills new elements using memset),
 - then the copy function (here `NULL` which simply does a `memcpy`), and
 - the destructor function (here `NULL`, which means no cleanup is needed)

For another example, if you had a structure of `int` pairs called `intpair_t`
as shown below, you could make a utarray of them using,

  typedef struct {
    int a;
    int b;
  } intpair_t;

  UT_icd intpair_icd = {sizeof(intpair_t), NULL, NULL, NULL};
  UT_array *pairs;
  utarray_new(pairs,&intpair_icd);

Complex elements
++++++++++++++++
When elements contain pointers that require more complex initialization, copy,
or destruct procedures, we use non- `NULL` values in the `UT_icd`.  Suppose we
plan to make a utarray of this element:

  typedef struct {
    int a;
    char *s;
  } intchar_t;

We'll need to provide code to "deep copy" and "deep free" the `char *s` so
it doesn't leak when the enclosing element is freed, and so that it is
copied, rather than shared, whenever the enclosing element is copied.

  void intchar_copy(void *_dst, void *_src) {
    intchar_t *dst = (intchar_t*)_dst, *src = (intchar_t*)_src;
    dst->a = src->a;
    dst->s = src->s ? strdup(src->s) : NULL;
  }
  void intchar_dtor(void *_elt) {
    intchar_t *elt = (intchar_t*)_elt;
    if (dst->s) free(dst->s);
  }

We still use the default `init` function (memset to zero) since that is sufficient here:

  UT_icd intchar_icd = {sizeof(intchar_t), NULL, intchar_copy, intchar_dtor};
  UT_array *intchars;
  utarray_new(intchars, &intchar_icd);

We'll see how the `init`, `copy` and `dtor` functions get used below.

Array operations
~~~~~~~~~~~~~~~~

[width="100%",cols="50<m,40<",grid="none",options="none"]
|===============================================================================
| utarray_new(UT_array *a, UT_icd *icd)| allocate a new array 
| utarray_free(UT_array *a)            | free an allocated array
| utarray_init(UT_array *a,UT_icd *icd)| init an array (non-alloc)
| utarray_done(UT_array *a)            | dispose of an array (non-allocd)
| utarray_reserve(UT_array *a,int n)  | ensure space available for 'n' more elements
| utarray_push_back(UT_array *a,void *p) | push element p onto a
| utarray_pop_back(UT_array *a)        | pop last element from a
| utarray_extend_back(UT_array *a)     | push empty element onto a
| utarray_len(UT_array *a)             | get length of a 
| utarray_eltptr(UT_array *a,int j)    | get pointer of element from index 
| utarray_eltidx(UT_array *a,void *e)  | get index of element from pointer
| utarray_insert(UT_array *a,void *p, int j) | insert element p to index j
| utarray_inserta(UT_array *a,UT_array *w, int j) | insert array w into array a at index j
| utarray_resize(UT_array *dst,int num)  | extend or shrink array to num elements
| utarray_concat(UT_array *dst,UT_array *src) | copy src to end of dst array
| utarray_erase(UT_array *a,int pos,int len) | remove len elements from a[pos]..a[pos+len-1]
| utarray_clear(UT_array *a) | clear all elements from a ,setting its length to zero
| utarray_sort(UT_array *a,cmpfcn *cmp) | sort elements of a using comparison function 
| utarray_front(UT_array *a) | get first element of a
| utarray_next(UT_array *a,void *e) | get element of a following e (first element if null)
| utarray_back(UT_array *a) | get last element of a
|===============================================================================

Notes
1. `utarray_new` and `utarray_free` are used to allocate a new array and free it,
   while `utarray_init` and `utarray_done` can be used if the UT_array is already
   allocated and just needs to be initialized (or internally freed)
2. `utarray_reserve` takes the "delta" of elements to reserve (not the total 
   desired capacity of the array; this differs from the C++ STL vector usage)
3. `utarray_sort` expects a comparison function having the usual `strcmp` -like
   convention where it accepts two elements (a and b) and returns a negative 
   value if a precedes b, 0 if a and b sort equally, and positive if b precedes a.
   This is an example of a comparison function:

  int intsort(const void *a,const void*b) {
      int _a = *(int*)a;
      int _b = *(int*)b;
      return _a - _b;
  }

Samples
~~~~~~~

.Integer array
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

.String array
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


// vim: set nowrap syntax=asciidoc: 

